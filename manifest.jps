---
jpsType: install
jpsVersion: '1.1'
name: JMeter Cluster
categories:
  - apps/popular
  - apps/clusters
  - apps/dev-and-admin-tools
description: A tool for performance testing
logo: https://raw.githubusercontent.com/jelastic-jps/wordpress-cluster/master/images/wp-cluster.png
baseUrl: https://raw.githubusercontent.com/mo3g89/jmeter-cluster/master

globals:
  WEBROOT_DIR: /var/www/webroot/ROOT
  JM_DIR: /root
  LOG: /var/log/autotests.log
  RESULTS_DIR: /root/jmeter-results
  GRAFANA_PASSWORD: ${fn.password(12)}

nodes:
  - nodeType: nginxphp
    cloudlets: 6
    nodeGroup: cp
    env:
      JELASTIC_PORTS: 22
    nodeGroupData:
      validation:
        maxCount: 1
    displayName: Web

  - image: devbeta/jmeter:5.1.1-libericajdk-12.0.1
    cloudlets: 16
    nodeGroup: master
    env:
      JELASTIC_PORTS: 22
      GC_ALGO: -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC
      HEAP: -XX:MaxRAMPercentage=70 -Xms32m
    nodeGroupData:
      validation:
        maxCount: 1
    displayName: Master
    volumes:
      - "/root/jmeter-results"
    volumeMounts:
      "/root/jmeter-results":
        readOnly: false
        sourcePath: "/var/www/webroot/ROOT"
        sourceNodeGroup: cp

  - image: devbeta/jmeter:5.1.1-libericajdk-12.0.1
    cloudlets: 16
    nodeGroup: workers
    env:
      JELASTIC_PORTS: 22
      GC_ALGO: -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC
      HEAP: -XX:MaxRAMPercentage=70 -Xms32m
    metadata:
      layer: workers
    displayName: Workers
    count: 2
    scalingMode: STATELESS
    
  - image: influxdb:1.7.7
    cloudlets: 16
    nodeGroup: influx
    env:
      JELASTIC_PORTS: 22
    nodeGroupData:
      validation:
        maxCount: 1
    displayName: DB


settings:
  main:
    fields:
    - type: radio-fieldset
      caption: Configuration type
      name: cfg-type
      default: '1'
      values:
        1: Default
        2: Custom
      showIf:
        1:
          - name: host
            caption: Host
            type: string
            tooltip: Website name
            inputType: string
            default: http://example.com
            regex: "^(?:http(s)?://)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$"
            regexText: 'Incorrect Link (example: http(s)://example.com/)'
            required: true
          - name: threadCount
            caption: Thread Count (VU)
            tooltip: "Count of Virtual Users, which should be created."
            type: spinner
            min: 1
            max: 640
            increment: 1
            decimalPrecision: ''
            default: 50
          - name: duration
            caption: Test Duration
            tooltip: "Test time duration in minutes. Value should be from 1 to 60 minutes."
            type: spinner
            min: 1
            max: 60
            increment: 1
            decimalPrecision: ''
            default: 10
          - name: rampup
            caption: Ramp-up Period
            tooltip: "Ramp-up Period - The time frame (in minutes) for all virtual users to start. E.g. for 100 virtual users and ramp-up time 1 minute, JMeter will set up 2 virtual users each second.</br>
          To set up all virtual users immediately, ramp-up period should be set to 0.</br>
          Value range -  from 0 to 60."
            type: spinner
            min: 0
            max: 60
            increment: 1
            decimalPrecision: ''
            default: 5
          - name: urls
            caption: URL List
            tooltip: "List of website urls, which should be included to test plan manifest.</br>For example: /index.php /wp-login.php</br>If field is empty test plan will be configured only for website root url."
            type: text
            inputType: text
            required: false
        2:
          - name: jmCustom
            caption: XML Manifest
            tooltip: "In case if you have your own JMeter test plan, you can put XML content of your jmx file here."
            type: text
            inputType: text
            required: true
  configGrafana:
    fields:
    - name: grafanaPassword
      caption: Grafana Password
      type: string
      tooltip: Indicate new password for user admin
      inputType: string
      required: true

onInstall:
  - installJMeterAddon
  - setupRemoteHosts
  - setupAuthKey
  - setupMasterConfigs
  - setupCpConfigs
  - setConfig

actions:

  setupCpConfigs:
    - cmd[cp]: |-
        wget ${baseUrl}/configs/nginx.conf -O /etc/nginx/nginx.conf
        /etc/init.d/nginx restart
        yum -q -y localinstall https://dl.grafana.com/oss/release/grafana-6.2.5-1.x86_64.rpm
        systemctl daemon-reload
        systemctl enable grafana-server.service
        sed -i 's|;root_url = http://localhost:3000|root_url = %(protocol)s://%(domain)s/grafana/|' /etc/grafana/grafana.ini
        sed -i 's|;domain = localhost|domain = localhost|' /etc/grafana/grafana.ini
        wget ${baseUrl}/configs/grafana.db -O /var/lib/grafana/grafana.db
        chown -R grafana.grafana /var/lib/grafana
        systemctl start grafana-server.service
        wget ${baseUrl}/scripts/grafana-set-password.sh -O /root/grafana-set-password.sh
        chmod +x /root/grafana-set-password.sh
        bash /root/grafana-set-password.sh ${globals.GRAFANA_PASSWORD}
      user: root

  setupMasterConfigs:
    - cmd[master]: |-
        yum install epel-release xmlstarlet -y -q
        wget ${baseUrl}/configs/TEST_PLAN.template -O ~/TEST_PLAN.template
        wget ${baseUrl}/scripts/clean-results.sh -O ~/clean-results.sh
        wget ${baseUrl}/scripts/kill-workers.sh -O ~/kill-workers.sh
        wget ${baseUrl}/scripts/run-workers.sh -O ~/run-workers.sh
        wget ${baseUrl}/scripts/prepare_plan.sh -O ~/prepare_plan.sh
        chmod +x ~/*.sh
        rm -rf ${globals.RESULTS_DIR}/*
        mkdir -p ${globals.RESULTS_DIR}/results
        wget ${baseUrl}/scripts/index.php -O  ${globals.RESULTS_DIR}/index.php
        touch ${globals.RESULTS_DIR}/jmeter-run.log
        chmod 777 ${globals.RESULTS_DIR}/jmeter-run.log
        ln -s ${globals.RESULTS_DIR}/jmeter-run.log ${globals.LOG}

  setupRemoteHosts:
    - cmd[master]: echo "${nodes.workers.join(address, \n)}" > /root/workers_list

  setupAuthKey:
    - cmd[master]: cat /root/.ssh/authorized_keys
    - cmd[workers]: mkdir -p /root/.ssh;echo "${response.responses.out}" >> /root/.ssh/authorized_keys

  runTests:
    - cmd[master]: chmod 777 /var/run/screen;/usr/bin/pkill screen;screen -wipe;screen -d -m /root/run-workers.sh ${settings.host}
      return:
         type: info
         message: JMeter running test progress bar available by url [${env.url}](${env.url})

  stopTests:
    - cmd [master]: chmod 777 /var/run/screen;/usr/bin/pkill screen;screen -wipe;screen -d -m /root/kill-workers.sh
  setConfig:
    if (${settings.cfg-type} == 1):
      cmd [master]: bash /root/prepare_plan.sh -u ${settings.threadCount} -r ${settings.rampup} -t ${settings.duration} -d ${settings.host} -l '${settings.urls}'
    if (${settings.cfg-type} == 2):
      cmd [master]: bash /root/prepare_plan.sh -c '${settings.jmCustom}'
  cleanResultsDir:
    cmd [master]: bash /root/clean-results.sh
  resetGrafanaPassword:
    - cmd [cp]: bash /root/grafana-set-password.sh ${settings.grafanaPassword}
      user: root

  installJMeterAddon:
      - jps:
          id: jmeter-addon
          name: JMeter Cluster
          type: update
          onAfterScaleOut[workers]:
            - setupRemoteHosts
            - installJMeterAddon
            - forEach(event.response.nodes):
              - cmd[master]: cat /root/.ssh/authorized_keys
              - cmd[${@i.id}]: mkdir -p /root/.ssh;echo "${response.responses.out}" >> /root/.ssh/authorized_keys

          onAfterScaleIn[workers]:
            - setupRemoteHosts
            - installJMeterAddon

          buttons:
          - action: runTests
            caption: Run tests
            logsPath: ${globals.LOG}
            successText: Autotest is running

          - action: stopTests
            caption: Stop tests
            logsPath: ${globals.LOG}
            successText: Autotests are stopped

          - settings: main
            action: setConfig
            caption: Change config
            logsPath: ${globals.LOG}
            submitButtonText: Apply
            successText: Test plan is successfully applied.

          menu:
          - action: cleanResultsDir
            caption: Clean results
            logsPath: ${globals.LOG}
            successText: Results directory was cleaned
          - settings: configGrafana
            action: resetGrafanaPassword
            caption: Reset Grafana Password
            logsPath: ${globals.LOG}
            successText: Password was successfully changed!

        nodeCount: ${nodes.workers.length}
        cloudlets: ${nodes.workers.flexibleCloudlets}

        script: |
          var manifest = eval('(' + MANIFEST + ')');
          jps = eval('(' + jps + ')');
          jps.globals = manifest.globals;
          jps.actions = manifest.actions;
          jps.settings = manifest.settings;
          jps.baseUrl = manifest.baseUrl;

          jps.settings.main.fields[0].showIf[1][1].max = parseInt((nodeCount * cloudlets) / 0.05, 10);

          return { result : 0, jps: String(jps) };

      - install:
          jps: ${response.jps}
          settings: ${settings.toJSON()}
          nodeGroup: master
          
success:
  text: text/success.md?_r=${fn.random}
