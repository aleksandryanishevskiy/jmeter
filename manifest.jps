---
jpsType: install
jpsVersion: '1.1'
name: Jmeter Cluster
categories:
  - apps/popular
  - apps/clusters
  - apps/dev-and-admin-tools
description: A tool for performance testing
logo: https://raw.githubusercontent.com/jelastic-jps/wordpress-cluster/master/images/wp-cluster.png
baseUrl: https://raw.githubusercontent.com/mo3g89/jmeter-cluster/master

globals:
  WEBROOT_DIR: /var/www/webroot/ROOT
  JM_DIR: /root
  LOG: /var/log/nginx/autotests.log

nodes:
  - nodeType: nginxphp
    cloudlets: 16
    nodeGroup: cp
    env:
      JELASTIC_PORTS: 22
    nodeGroupData:
      validation:
        maxCount: 1
    links: worker:worker
    displayName: Master

  - nodeType: javaengine
    tag: jdk-9.0.4
    cloudlets: 16
    nodeGroup: workers
    env:
      JELASTIC_PORTS: 22
    metadata:
      layer: workers
    displayName: Workers
    count: 2
    scalingMode: STATELESS

settings:
    fields:
    - type: radio-fieldset
      caption: Configuration type
      name: cfg-type
      default: '1'
      values:
        1: Default
        2: Custom
      showIf:
        1:
              - name: host
                caption: Host
                type: string
                tooltip: Website name
                inputType: string
                default: example.com
                regex: "^(?:http(s)?://)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$"
                regexText: 'Incorrect Link (example: http(s)://example.com/)'
                required: true
              - name: protocol
                type: list
                caption: Protocol
                values:
                   http: http
                   https: https
                hideLabel: false
                editable: false
                default: http
                required: true
              - name: threadCount
                caption: Thread Count (VU)
                tooltip: "Count of Virtual Users, which should be created."
                type: spinner
                min: 1
                max: 10000
                increment: 1
                decimalPrecision: ''
                default: 50
              - name: duration
                caption: Test Duration
                tooltip: "Test time duration in minutes. Value should be from 1 to 60 minutes."
                type: spinner
                min: 1
                max: 60
                increment: 1
                decimalPrecision: ''
                default: 10
              - name: rampup
                caption: Ramp-up Period
                tooltip: "Ramp-up Period - The time frame (in minutes) for all virtual users to start. E.g. for 100 virtual users and ramp-up time 1 minute, jmeter will set up 2 virtual users each second.</br>
          To set up all virtual users immediately, ramp-up period should be set to 0.</br>
          Value range -  from 0 to 60."
                type: spinner
                min: 0
                max: 60
                increment: 1
                decimalPrecision: ''
                default: 600
              - name: urls
                caption: URL List
                tooltip: "List of website urls, which should be included to test plan manifest.</br>For example: /index.php /wp-login.php</br>If field is empty test plan will be configured only for website root url."
                type: text
                inputType: text
                required: false
        2:
              - name: jmCustom
                caption: Jmeter Custom Config
                tooltip: "In case if you have your own jmeter test plan, you can put XML content of your jmx file here."
                type: text
                inputType: text
                required: true

onAfterScaleOut[workers]:
  - forEach(event.response.nodes):
    - cmd[${@i.id}]: |-
        wget http://apache.volia.net//jmeter/binaries/apache-jmeter-5.1.1.zip -O /tmp/apache-jmeter.zip
        unzip -q /tmp/apache-jmeter.zip; mv ~/apache-jmeter-5.1.1/ ~/jmeter
        wget ${baseUrl}/scripts/jmeter -O ~/jmeter/bin/jmeter
        chmod +x ~/jmeter/bin/jmeter
        wget ${baseUrl}/configs/jmeter.properties -O ~/jmeter/bin/jmeter.properties
      user: root
    - cmd[cp]: cat /root/.ssh/authorized_keys
      user: root
    - cmd[${@i.id}]: mkdir -p /root/.ssh;echo "${response.responses.out}" > /root/.ssh/authorized_keys
      user: root
  - setupRemoteHosts
  - installJMeterAddon: ${settings.toJSON()}

onAfterScaleIn[workers]:
  - setupRemoteHosts
  - installJMeterAddon: ${settings.toJSON()}

onInstall:  
  - installJMeterAddon: ${settings.toJSON()}
  - setupJmeter
  - setupRemoteHosts
  - setupAuthKey
  - setupCpConfigs
  - setConfig

actions:
  setupJmeter:
    - cmd[cp,workers]: |-
        wget http://apache.volia.net//jmeter/binaries/apache-jmeter-5.1.1.zip -O /tmp/apache-jmeter.zip
        unzip -q /tmp/apache-jmeter.zip; mv ~/apache-jmeter-5.1.1/ ~/jmeter
        wget ${baseUrl}/scripts/jmeter -O ~/jmeter/bin/jmeter
        chmod +x ~/jmeter/bin/jmeter
        wget ${baseUrl}/configs/jmeter.properties -O ~/jmeter/bin/jmeter.properties
      user: root
      
  setupCpConfigs:
    - cmd[cp]: |-
        yum install java-1.8.0-openjdk  epel-release xmlstarlet -y -q
        rm -rf ${globals.WEBROOT_DIR}/*
        mkdir -p ${globals.WEBROOT_DIR}/results
        wget ${baseUrl}/configs/nginx.conf -O /etc/nginx/nginx.conf
        /etc/init.d/nginx restart
        wget ${baseUrl}/configs/TEST_PLAN.template -O ~/TEST_PLAN.template
        wget ${baseUrl}/scripts/clean-results.sh -O ~/clean-results.sh
        wget ${baseUrl}/scripts/kill-workers.sh -O ~/kill-workers.sh
        wget ${baseUrl}/scripts/run-workers.sh -O ~/run-workers.sh
        wget ${baseUrl}/scripts/prepare_plan.sh -O ~/prepare_plan.sh
        wget ${baseUrl}/scripts/index.php -O  ${globals.WEBROOT_DIR}/index.php
        touch ${globals.WEBROOT_DIR}/jmeter-run.log
        ln -s ${globals.WEBROOT_DIR}/jmeter-run.log ${globals.LOG}
        chmod +x ~/*.sh
      user: root
    
  setupRemoteHosts:
    - cmd[cp]: echo "${nodes.workers.join(address, \n)}" > /root/workers_list
      user: root
      
  setupAuthKey:
    - cmd[cp]: cat /root/.ssh/authorized_keys
      user: root
    - cmd[workers]: mkdir -p /root/.ssh;echo "${response.responses.out}" > /root/.ssh/authorized_keys
      user: root

  runTests:
    - cmd[cp]: chmod 777 /var/run/screen;/usr/bin/pkill screen;screen -wipe;screen -d -m /root/run-workers.sh ${settings.host}-jmeter |tee ${globals.LOG}
      user: root
      return: 
         type: info
         message: Jmeter running test progress bar available by url [${env.url}](${env.url})

  stopTests:
    - cmd [cp]: chmod 777 /var/run/screen;/usr/bin/pkill screen;screen -wipe;screen -d -m /root/kill-workers.sh |tee ${globals.LOG}
      user: root
  setConfig:
    if (${settings.cfg-type} == 1):
      cmd [cp]: bash /root/prepare_plan.sh -u ${settings.threadCount} -r ${settings.rampup} -t ${settings.duration} -d ${settings.host} -p ${settings.protocol} -l '${settings.urls}'
      user: root
    if (${settings.cfg-type} == 2):
      cmd [cp]: bash /root/prepare_plan.sh -c '${settings.jmCustom}'
      user: root
  cleanResultsDir:
    cmd [cp]: bash /root/clean-results.sh
    user: root
    
  installJMeterAddon:
      - jps: 
          id: jmeter-addon
          name: Jmeter Cluster
          type: update

          buttons:
          - action: runTests
            caption: Run tests
            logsPath: ${globals.LOG}
            successText: Autotest is running

          - action: stopTests
            caption: Stop tests
            logsPath: ${globals.LOG}
            successText: Autotests are stopped

          - settings: main
            action: setConfig
            caption: Change config
            logsPath: ${globals.LOG}
            submitButtonText: Apply
            successText: Test plan is successfully applied.

          menu:
          - action: cleanResultsDir
            caption: Clean results
            logsPath: ${globals.LOG}
            successText: Results directory was cleaned

        nodeCount: ${nodes.workers.length}
        cloudlets: ${nodes.workers.flexibleCloudlets}

        script: |
          var manifest = eval('(' + MANIFEST + ')');
          jps = eval('(' + jps + ')');    
          jps.globals = manifest.globals;
          jps.actions = manifest.actions;
          jps.settings = manifest.settings;

          jps.settings.fields[0].showIf['1'][2].max = parseInt((nodeCount * cloudlets) / 0.16, 10);

          return { result : 0, jps: String(jps) };

      - install: 
          jps: ${response.jps}
          settings: ${this}
          nodeGroup: cp
